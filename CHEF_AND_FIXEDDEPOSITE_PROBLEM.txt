PROBLEM NAME - CHEF AND FIXED DEPOSITS 
PROBLEM CODE - MINFD 

PROBLEM DESCRIPTION - 
Chef wants to make a purchase. For this, he needs X gold coins, but he has none at the moment.

Chef has N fixed deposits, the ith of which is worth Ai coins. He wants to open the minimum number of these deposits so that he has at least X coins.

You have to tell Chef the minimum number of fixed deposits he must open in order to have X coins, or say that this is impossible.

Input Format :-
The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows.
The first line of each test case contains two space-separated integers — N and X, as described in the statement.
The second line of each test case contains N space-separated integers — the ith of which is Ai.

Output Format:-
For each test case, output one line containing the answer — the minimum number of FDs Chef must open to have at least X coins. If it is not possible for him to open FDs such that he has at least X coins, output −1.


Sample Input 1 :-
4
4 6
4 3 5 1
3 15
1 5 3
2 5
10 3
4 7
1 2 3 4

Sample Output 1 :- 
2
-1
1
2

SOLUTION IN JAVA - 


import java.util.*;
import java.lang.*;
import java.io.*;

class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int testcase = sc.nextInt();
		while(testcase-- >0){
		    int temp;
		    boolean flag = false;
		    int n = sc.nextInt();
		    int target = sc.nextInt();
		    ArrayList<Integer> a = new ArrayList<Integer>(n);
		    int sum = 0;
		    for (int i = 0; i< n ; i++){
		        a.add(sc.nextInt());
		    } 
		    Collections.sort(a, Collections.reverseOrder());
		    int j;
		    for( j = 0 ; j<n ; j++){
		        sum+=a.get(j);
		        if(sum >= target){
		            flag = true;
		            break;
		        }
		    }
		    if(flag) System.out.println(j+1);
		    else System.out.println(-1);
		}
	}
}





